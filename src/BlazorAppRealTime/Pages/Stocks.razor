@page "/stocks"
@using BazorAuth.Shared
@using Microsoft.AspNetCore.SignalR.Client
@using System.Collections.Generic
@inject NavigationManager NavigationManager
@inject Services.FetchAuthStatusService FetchAuthStatusService
@inject Services.FetchWeatherForecastService WeatherService
<h1>Stocks</h1>


<p><em>Market is @marketState</em></p>
<table class="table">
    <thead>
        <tr>
            <th>Symbol</th>
            <th>Price</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in _mapStocks)
        {
        <tr>
            <td>@item.Value.Symbol</td>
            <td>@item.Value.Price</td>
        </tr>
        }
    </tbody>
</table>

<DxChart Data="@forecasts" LabelOverlap="ChartLabelOverlap.Hide">
    <DxChartTitle Text="Weather Forecast">
        <DxChartSubTitle Text="(10 days)" />
    </DxChartTitle>
    <DxChartArgumentAxis>
        <DxChartAxisTitle Text="Date" />
        <DxChartAxisLabel Format="ChartAxisLabelFormat.ShortDate" />
    </DxChartArgumentAxis>
    <DxChartValueAxis>
        <DxChartAxisTitle Text="Precipitation, mm" />
    </DxChartValueAxis>
    <DxChartValueAxis Name="Temperature" Position="HorizontalEdge.Right">
        <DxChartAxisTitle Text="Temperature, C" />
    </DxChartValueAxis>
    <DxChartBarSeries ArgumentField="@((WeatherForecast i) => i.Date)"
                      ValueField="@((WeatherForecast i) => i.Precipitation)"
                      Name="Precipitation">
        <DxChartSeriesLabel Visible="true" />
    </DxChartBarSeries>
    <DxChartLineSeries ArgumentField="@((WeatherForecast i) => i.Date)"
                       ValueField="@((WeatherForecast i) => i.TemperatureC)"
                       Name="Temperature"
                       Axis="Temperature">
        <DxChartSeriesPoint Symbol="@ChartPointSymbol.Polygon" Size="20" />
        <DxChartSeriesLabel Visible="true">
            <DxChartSeriesLabelConnector Visible="true" Width="2" />
        </DxChartSeriesLabel>
    </DxChartLineSeries>
    <DxChartLegend Orientation="@Orientation.Horizontal"
                   HorizontalAlignment="@HorizontalAlignment.Right"
                   Position="RelativePosition.Outside" />
</DxChart>


@code {
    string marketState = "Closed";
    Dictionary<string, Stock> _mapStocks = new Dictionary<string, Stock>();
    Stock[] stocks;
    private HubConnection hubConnection;

    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        await FetchAuthStatusService.PingAsync();
        var url = NavigationManager.ToAbsoluteUri("/stock-ticker");
        var url2 = url.AbsoluteUri;
        hubConnection = new HubConnectionBuilder()
               .WithUrl(url)
               .Build();
        hubConnection.On<string>("OnMarketStateChanged", (state) =>
        {
            marketState = state;
            StateHasChanged();
        });

        hubConnection.On<Stock>("OnStockChanged", (stock) =>
        {
            _mapStocks[stock.Symbol] = stock;
            StateHasChanged();
        });
        await hubConnection.StartAsync();

        forecasts = await WeatherService.GetPublicWeatherForeacast();



    }


}
