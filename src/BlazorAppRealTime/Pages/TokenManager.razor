@page "/tokenmanager"
@inject Services.FetchAuthStatusService FetchAuthStatusService

@using OAuth2.TokenManagement.Client


<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<button class="btn btn-primary" @onclick="FetchBearerToken">FetchBearerToken</button>

@if (managedToken != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>AccessToken</th>
                <th>Authority</th>
                <th>ClientId</th>
                <th>ExpiresIn</th>
                <th>RefreshToken</th>
                <th>ExpirationDate</th>
            </tr>
        </thead>
        <tbody>

            <tr>
                <td>@managedToken.AccessToken</td>
                <td>@managedToken.Authority</td>
                <td>@managedToken.ClientId</td>
                <td>@managedToken.ExpiresIn</td>
                <td>@managedToken.RefreshToken</td>
                <td>@managedToken.ExpirationDate</td>
            </tr>

        </tbody>
    </table>
    <button class="btn btn-primary" @onclick="GetManagedToken">GetManagedToken</button>
}

@code {
    private int currentCount = 0;
    private ManagedToken managedToken;
    private void IncrementCount()
    {
        currentCount++;
    }
    private async Task FetchBearerToken()
    {
        managedToken = await FetchAuthStatusService.FetchFakeBearerTokenAsync();
        StateHasChanged();
    }
    private async Task GetManagedToken()
    {
        managedToken = await FetchAuthStatusService.GetFakeManagedTokenAsync();
        StateHasChanged();
    }
}
